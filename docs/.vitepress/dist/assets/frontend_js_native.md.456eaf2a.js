import{_ as l,c as e,o as a,a as i}from"./app.248772be.js";const _=JSON.parse('{"title":"基础知识点","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]}]},{"level":2,"title":"标准内置对象","slug":"标准内置对象","link":"#标准内置对象","children":[{"level":3,"title":"原始值","slug":"原始值","link":"#原始值","children":[]},{"level":3,"title":"引用值","slug":"引用值","link":"#引用值","children":[]},{"level":3,"title":"包装对象","slug":"包装对象","link":"#包装对象","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]}]},{"level":2,"title":"全局对象","slug":"全局对象","link":"#全局对象","children":[]},{"level":2,"title":"宿主对象","slug":"宿主对象","link":"#宿主对象","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}],"relativePath":"frontend/js/native.md"}'),n={name:"frontend/js/native.md"},s=i(`<h1 id="基础知识点" tabindex="-1">基础知识点 <a class="header-anchor" href="#基础知识点" aria-hidden="true">#</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h2><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a></h3><ul><li>undefined</li><li>null</li><li>number</li><li>string</li><li>boolean</li><li>Symbol 表示独一无二的值，这个类型的出现应该是为了解决可能出现的全局变量冲突的问题</li><li>BigInt 表示任意精度格式的整数，使用BigInt可以安全的存储和操作大整数，即使这个数已经超出了Number能够表示的安全证书范围</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 获取Symbol声明的属性名</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertySymbols</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span></code></pre></div><ul><li><p>Set 无重复值的有序列表</p></li><li><p>Map 键值对的有序列表</p></li></ul><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-hidden="true">#</a></h3><ul><li>array</li><li>object</li></ul><h2 id="标准内置对象" tabindex="-1">标准内置对象 <a class="header-anchor" href="#标准内置对象" aria-hidden="true">#</a></h2><h3 id="原始值" tabindex="-1">原始值 <a class="header-anchor" href="#原始值" aria-hidden="true">#</a></h3><ul><li>undefined</li><li>null</li><li>number</li><li>string</li><li>boolean</li></ul><h3 id="引用值" tabindex="-1">引用值 <a class="header-anchor" href="#引用值" aria-hidden="true">#</a></h3><ul><li>object</li></ul><h3 id="包装对象" tabindex="-1">包装对象 <a class="header-anchor" href="#包装对象" aria-hidden="true">#</a></h3><ul><li>Number</li><li>String</li><li>Boolean</li></ul><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-hidden="true">#</a></h3><ul><li>Object</li><li>Function</li><li>Date</li><li>Error</li><li>RegExp</li><li>Array</li><li>Math</li><li>JSON</li><li>Arguments</li></ul><h2 id="全局对象" tabindex="-1">全局对象 <a class="header-anchor" href="#全局对象" aria-hidden="true">#</a></h2><h2 id="宿主对象" tabindex="-1">宿主对象 <a class="header-anchor" href="#宿主对象" aria-hidden="true">#</a></h2><ul><li>window</li><li>history</li><li>navigetor</li><li>document</li></ul><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h2><p>函数的执行，导致函数被定义</p><p>闭包是指有权访问另一个 函数作用域中变量的函数</p>`,23),t=[s];function r(d,o,h,c,p,u){return a(),e("div",null,t)}const y=l(n,[["render",r]]);export{_ as __pageData,y as default};

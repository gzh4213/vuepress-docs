import{_ as s,c as n,o as a,a as l}from"./app.248772be.js";const A=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[{"level":2,"title":"响应式：核心","slug":"响应式-核心","link":"#响应式-核心","children":[{"level":3,"title":"ref()","slug":"ref","link":"#ref","children":[]},{"level":3,"title":"reactive()","slug":"reactive","link":"#reactive","children":[]},{"level":3,"title":"readonly()","slug":"readonly","link":"#readonly","children":[]},{"level":3,"title":"computed ()","slug":"computed","link":"#computed","children":[]},{"level":3,"title":"watch()","slug":"watch","link":"#watch","children":[]},{"level":3,"title":"watchEffect()","slug":"watcheffect","link":"#watcheffect","children":[]}]},{"level":2,"title":"响应式：工具","slug":"响应式-工具","link":"#响应式-工具","children":[{"level":3,"title":"isRef","slug":"isref","link":"#isref","children":[]},{"level":3,"title":"toRef()","slug":"toref","link":"#toref","children":[]},{"level":3,"title":"toRefs()","slug":"torefs","link":"#torefs","children":[]}]},{"level":2,"title":"响应式：进阶","slug":"响应式-进阶","link":"#响应式-进阶","children":[{"level":3,"title":"shallowRef()","slug":"shallowref","link":"#shallowref","children":[]},{"level":3,"title":"triggerRef()","slug":"triggerref","link":"#triggerref","children":[]},{"level":3,"title":"customRef()","slug":"customref","link":"#customref","children":[]},{"level":3,"title":"shallowReactive()","slug":"shallowreactive","link":"#shallowreactive","children":[]},{"level":3,"title":"toRaw()","slug":"toraw","link":"#toraw","children":[]}]},{"level":2,"title":"应用配置","slug":"应用配置","link":"#应用配置","children":[{"level":3,"title":"errorHandler","slug":"errorhandler","link":"#errorhandler","children":[]},{"level":3,"title":"warnHandler","slug":"warnhandler","link":"#warnhandler","children":[]},{"level":3,"title":"globalProperties","slug":"globalproperties","link":"#globalproperties","children":[]},{"level":3,"title":"optionMergeStrategies","slug":"optionmergestrategies","link":"#optionmergestrategies","children":[]},{"level":3,"title":"performance","slug":"performance","link":"#performance","children":[]},{"level":3,"title":"compilerOptions 3.1+","slug":"compileroptions-3-1","link":"#compileroptions-3-1","children":[]}]},{"level":2,"title":"应用API","slug":"应用api","link":"#应用api","children":[{"level":3,"title":"component","slug":"component","link":"#component","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]},{"level":3,"title":"directive","slug":"directive","link":"#directive","children":[]},{"level":3,"title":"mixin","slug":"mixin","link":"#mixin","children":[]},{"level":3,"title":"mount","slug":"mount","link":"#mount","children":[]},{"level":3,"title":"provide","slug":"provide","link":"#provide","children":[]},{"level":3,"title":"unmount","slug":"unmount","link":"#unmount","children":[]},{"level":3,"title":"use","slug":"use","link":"#use","children":[]},{"level":3,"title":"version","slug":"version","link":"#version","children":[]}]},{"level":2,"title":"全局API","slug":"全局api","link":"#全局api","children":[{"level":3,"title":"createApp","slug":"createapp","link":"#createapp","children":[]},{"level":3,"title":"h","slug":"h","link":"#h","children":[]},{"level":3,"title":"defineComponent","slug":"definecomponent","link":"#definecomponent","children":[]},{"level":3,"title":"defineAsyncComponent","slug":"defineasynccomponent","link":"#defineasynccomponent","children":[]},{"level":3,"title":"defineCustomElement","slug":"definecustomelement","link":"#definecustomelement","children":[]},{"level":3,"title":"resolveComponent","slug":"resolvecomponent","link":"#resolvecomponent","children":[]},{"level":3,"title":"resolveDynamicComponent","slug":"resolvedynamiccomponent","link":"#resolvedynamiccomponent","children":[]},{"level":3,"title":"resolveDirective","slug":"resolvedirective","link":"#resolvedirective","children":[]},{"level":3,"title":"withDirectives","slug":"withdirectives","link":"#withdirectives","children":[]},{"level":3,"title":"createRenderer","slug":"createrenderer","link":"#createrenderer","children":[]},{"level":3,"title":"nextTick","slug":"nexttick","link":"#nexttick","children":[]},{"level":3,"title":"mergeProps","slug":"mergeprops","link":"#mergeprops","children":[]},{"level":3,"title":"useCssModule","slug":"usecssmodule","link":"#usecssmodule","children":[]},{"level":3,"title":"version","slug":"version-1","link":"#version-1","children":[]},{"level":3,"title":"params","slug":"params","link":"#params","children":[]}]},{"level":2,"title":"mount","slug":"mount-1","link":"#mount-1","children":[]},{"level":2,"title":"$emit","slug":"emit","link":"#emit","children":[]},{"level":2,"title":"provied/inject","slug":"provied-inject","link":"#provied-inject","children":[]},{"level":2,"title":"defineAsyncComponent","slug":"defineasynccomponent-1","link":"#defineasynccomponent-1","children":[]},{"level":2,"title":"Suspense","slug":"suspense","link":"#suspense","children":[]}],"relativePath":"frontend/vue/API.md"}'),e={name:"frontend/vue/API.md"},p=l(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h1><h2 id="响应式-核心" tabindex="-1">响应式：核心 <a class="header-anchor" href="#响应式-核心" aria-hidden="true">#</a></h2><h3 id="ref" tabindex="-1">ref() <a class="header-anchor" href="#ref" aria-hidden="true">#</a></h3><p>接受一个内部值，返回一个响应式的、可更改的 <code>ref</code> 对象，此对象只有一个指向其内部值的 property <code>.value</code>。</p><p><code>ref</code> 对象是可更改的，也就是说你可以为 <code>.value</code> 赋予新的值。它也是响应式的，即所有对 <code>.value</code> 的操作都将被追踪，并且写操作会触发与之相关的副作用。</p><p>如果将一个对象赋值给 <code>ref</code>，那么这个对象将通过 <code>reactive()</code> 转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的 <code>ref</code>，它们将被深层地解包。</p><p>若要避免这种深层次的转换，请使用 <code>shallowRef()</code> 来替代。</p><h3 id="reactive" tabindex="-1">reactive() <a class="header-anchor" href="#reactive" aria-hidden="true">#</a></h3><p>返回一个对象的响应式代理。</p><p>响应式转换是“深层”的：它会影响到所有嵌套的 property。一个响应式对象也将深层地解包任何 <code>ref</code> property，同时保持响应性。</p><p>值得注意的是，当访问到某个响应式数组或 <code>Map</code> 这样的原生集合类型中的 <code>ref</code> 元素时，不会执行 <code>ref</code> 的解包。</p><p>若要避免深层响应式转换，只想保留对这个对象顶层次访问的响应性，请使用 <code>shallowReactive()</code> 作替代。</p><p>返回的对象以及其中嵌套的对象都会通过 ES Proxy 包裹，因此不等于源对象，建议只使用响应式代理，避免依赖于原始对象。</p><h3 id="readonly" tabindex="-1">readonly() <a class="header-anchor" href="#readonly" aria-hidden="true">#</a></h3><p>接受一个对象 (不论是响应式还是一般的) 或是一个 <code>ref</code>，返回一个原值的只读代理。</p><p>只读代理是深层的：对任何嵌套 property 的访问都将是只读的。它的 <code>ref</code> 解包行为与 reactive() 相同，但解包得到的值是只读的。</p><p>要避免深层级的转换行为，请使用 <code>shallowReadonly()</code> 作替代。</p><h3 id="computed" tabindex="-1">computed () <a class="header-anchor" href="#computed" aria-hidden="true">#</a></h3><p>接受一个 <code>getter</code> 函数，返回一个只读的响应式 <code>ref</code> 对象，即 <code>getter</code> 函数的返回值。它也可以接受一个带有 <code>get</code> 和 <code>set</code> 函数的对象来创建一个可写的 <code>ref</code> 对象。</p><h3 id="watch" tabindex="-1">watch() <a class="header-anchor" href="#watch" aria-hidden="true">#</a></h3><p>侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数。</p><h3 id="watcheffect" tabindex="-1">watchEffect() <a class="header-anchor" href="#watcheffect" aria-hidden="true">#</a></h3><p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。</p><h2 id="响应式-工具" tabindex="-1">响应式：工具 <a class="header-anchor" href="#响应式-工具" aria-hidden="true">#</a></h2><h3 id="isref" tabindex="-1">isRef <a class="header-anchor" href="#isref" aria-hidden="true">#</a></h3><p>检查某个值是否为 <code>ref</code>。</p><h3 id="toref" tabindex="-1">toRef() <a class="header-anchor" href="#toref" aria-hidden="true">#</a></h3><p>可用于为响应式对象上的 property 创建 <code>ref</code>。这样创建的 <code>ref</code> 与其源 property 保持同步：改变源 property 将更新 <code>ref</code>，反之亦然。</p><h3 id="torefs" tabindex="-1">toRefs() <a class="header-anchor" href="#torefs" aria-hidden="true">#</a></h3><p>将一个响应式对象转换为一个普通对象，这个普通对象的每个 <code>property</code> 都是指向源对象相应 <code>property</code> 的 <code>ref</code>。每个单独的 <code>ref</code> 都是使用 <code>toRef()</code> 创建的。</p><h2 id="响应式-进阶" tabindex="-1">响应式：进阶 <a class="header-anchor" href="#响应式-进阶" aria-hidden="true">#</a></h2><h3 id="shallowref" tabindex="-1">shallowRef() <a class="header-anchor" href="#shallowref" aria-hidden="true">#</a></h3><p><code>ref()</code> 的浅层作用形式。</p><p>和 <code>ref()</code> 不同，浅层 <code>ref</code> 的内部值将会原样存储和暴露，并且不会被深层递归地转为响应式。只有对 <code>.value</code> 的访问是响应式的。 <code>shallowRef()</code> 常常用于对大型数据结构的性能优化或是与外部的状态管理系统集成。</p><h3 id="triggerref" tabindex="-1">triggerRef() <a class="header-anchor" href="#triggerref" aria-hidden="true">#</a></h3><p>强制触发依赖于一个浅层 <code>ref</code> 的副作用，这通常在对浅引用的内部值进行深度变更后使用。</p><h3 id="customref" tabindex="-1">customRef() <a class="header-anchor" href="#customref" aria-hidden="true">#</a></h3><h3 id="shallowreactive" tabindex="-1">shallowReactive() <a class="header-anchor" href="#shallowreactive" aria-hidden="true">#</a></h3><p><code>reactive()</code> 的浅层作用形式。</p><p>和 reactive() 不同，这里没有深层级的转换：一个浅层响应式对象里只有根级别的 property 是响应式的。property 的值会被原样存储和暴露，这也意味着值为 ref 的 property 不会被自动解包了。</p><h3 id="toraw" tabindex="-1">toRaw() <a class="header-anchor" href="#toraw" aria-hidden="true">#</a></h3><p>根据一个 Vue 创建的代理返回其原始对象。</p><p><code>toRaw()</code> 可以返回由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或者 <code>shallowReadonly()</code> 创建的代理对应的原始对象。</p><p>这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p><h2 id="应用配置" tabindex="-1">应用配置 <a class="header-anchor" href="#应用配置" aria-hidden="true">#</a></h2><h3 id="errorhandler" tabindex="-1">errorHandler <a class="header-anchor" href="#errorhandler" aria-hidden="true">#</a></h3><p>处理组件渲染函数和侦听器执行期间抛出的未捕获错误</p><h3 id="warnhandler" tabindex="-1">warnHandler <a class="header-anchor" href="#warnhandler" aria-hidden="true">#</a></h3><p>为 Vue 的运行时警告指定一个自定义处理函数。注意这只会在开发环境下生效，在生产环境下它会被忽略。</p><h3 id="globalproperties" tabindex="-1">globalProperties <a class="header-anchor" href="#globalproperties" aria-hidden="true">#</a></h3><ul><li>用法</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 之前 (Vue 2.x)</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$http</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 之后 (Vue 3.x)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">globalProperties</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$http</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>添加一个可以在应用的任何组件实例中访问的全局 property。组件的 property 在命名冲突时具有优先权。</p><h3 id="optionmergestrategies" tabindex="-1">optionMergeStrategies <a class="header-anchor" href="#optionmergestrategies" aria-hidden="true">#</a></h3><ul><li>用法</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hello</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">optionMergeStrategies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">parent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">child</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mixin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">hello</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;Hello, Vue&#39;</span></span>
<span class="line"></span></code></pre></div><p>为自定义选项定义合并策略。 合并策略选项分别接收在父实例和子实例上定义的选项的值作为第一个和第二个参数。</p><h3 id="performance" tabindex="-1">performance <a class="header-anchor" href="#performance" aria-hidden="true">#</a></h3><p>设置为 <code>true</code> 以在浏览器开发工具的 <code>performance/timeline</code> 面板中启用对组件初始化、编译、渲染和更新的性能追踪。只适用于开发模式和支持 <code>performance.mark</code> API 的浏览器。</p><h3 id="compileroptions-3-1" tabindex="-1">compilerOptions <em>3.1+</em> <a class="header-anchor" href="#compileroptions-3-1" aria-hidden="true">#</a></h3><p>配置运行时编译器的选项。设置在这个对象上的值将会被传入浏览器内的模板编译器，并影响配置过的应用内的每个组件。注意，你也可以使用 compilerOptions 选项在每个组件的基础上覆写这些选项。</p><h4 id="compileroptions-iscustomelement" tabindex="-1">compilerOptions.isCustomElement <a class="header-anchor" href="#compileroptions-iscustomelement" aria-hidden="true">#</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 任何以 &#39;ion-&#39; 开头的元素都会被识别为自定义元素</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isCustomElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> tag</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ion-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>指定一个方法来识别 <code>Vue</code> 以外 (例如通过 <code>Web Components API</code>) 定义的自定义元素。如果一个组件匹配了这个条件，它就不需要在本地或全局注册，<code>Vue</code> 也不会抛出 <code>Unknown custom element</code> 的警告。</p><h4 id="compileroptions-whitespace" tabindex="-1">compilerOptions.whitespace <a class="header-anchor" href="#compileroptions-whitespace" aria-hidden="true">#</a></h4><ul><li>类型： <code>&#39;condense&#39; | &#39;preserve&#39;</code></li><li>默认值： <code>&#39;condense&#39;</code></li><li>用法：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">whitespace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">preserve</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>默认情况下，Vue 会移除/压缩模板元素之间的空格以产生更高效的编译结果：</p><ol><li>元素内的多个开头/结尾空格会被压缩成一个空格</li><li>元素之间的包括折行在内的多个空格会被移除</li><li>文本结点之间可被压缩的空格都会被压缩成为一个空格</li><li>将值设置为 <code>&#39;preserve&#39;</code> 可以禁用 (2) 和 (3)。</li></ol><h4 id="compileroptions-delimiters" tabindex="-1">compilerOptions.delimiters <a class="header-anchor" href="#compileroptions-delimiters" aria-hidden="true">#</a></h4><ul><li>默认值： <code>[&#39;, &#39;]</code></li><li>用法：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将分隔符设置为 ES6 模板字符串风格</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">delimiters </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\${</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]    </span></span>
<span class="line"></span></code></pre></div><p>用于配置模板内文本插值的分隔符。</p><p>这个选项一般会用于避免和同样使用双大括号语法的服务端框架发生冲突。</p><h4 id="compileroptions-comments" tabindex="-1">compilerOptions.comments <a class="header-anchor" href="#compileroptions-comments" aria-hidden="true">#</a></h4><ul><li>默认值： <code>false</code></li><li>用法：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">compilerOptions</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">comments </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>默认情况下，Vue 会在生产环境下移除模板内的 HTML 注释。将这个选项设置为 true 可以强制 Vue 在生产环境下保留注释。而在开发环境下注释是始终被保留的。</p><p>这个选项一般会用于依赖 HTML 注释的其它库和 Vue 配合使用。</p><h2 id="应用api" tabindex="-1">应用API <a class="header-anchor" href="#应用api" aria-hidden="true">#</a></h2><p>在 Vue 3 中，全局改变 Vue 行为的 API 现在被移动到了由新的 createApp 方法所创建的应用实例上。此外，现在它们的影响仅限于该特定应用实例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>调用 <code>createApp</code> 返回一个应用实例。该实例提供了一个应用上下文。应用实例挂载的整个组件树共享相同的上下文，该上下文提供了之前在 Vue 2.x 中的“全局”配置。</p><p>另外，由于 createApp 方法返回应用实例本身，因此可以在其后链式调用其它方法，这些方法可以在以下部分中找到。</p><h3 id="component" tabindex="-1">component <a class="header-anchor" href="#component" aria-hidden="true">#</a></h3><p>注册或检索全局组件。注册还会使用给定的 name 参数自动设置组件的 name。</p><ul><li>返回值 <ul><li>如果传入 definition 参数，则返回应用实例。</li><li>如果不传入 definition 参数，则返回组件定义。</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注册一个选项对象</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 检索注册的组件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h3><p>一个包含应用配置的对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span></span>
<span class="line"></span></code></pre></div><h3 id="directive" tabindex="-1">directive <a class="header-anchor" href="#directive" aria-hidden="true">#</a></h3><ul><li>返回值 <ul><li>如果传入 definition 参数，则返回应用实例。</li><li>如果不传入 definition 参数，则返回指令定义。</li></ul></li></ul><p>注册或检索全局指令</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注册</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-directive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 指令具有一组生命周期钩子：</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在绑定元素的 attribute 或事件监听器被应用之前调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在绑定元素的父组件挂载之前调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在绑定元素的父组件挂载之后调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在包含组件的 VNode 更新之前调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeUpdate</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在包含组件的 VNode 及其子组件的 VNode 更新之后调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">updated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在绑定元素的父组件卸载之前调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeUnmount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在绑定元素的父组件卸载之后调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">unmounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注册 (函数指令)</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-directive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这将被作为 \`mounted\` 和 \`updated\` 调用</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// getter, 如果已注册，则返回指令定义</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myDirective </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-directive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="mixin" tabindex="-1">mixin <a class="header-anchor" href="#mixin" aria-hidden="true">#</a></h3><p>将一个 mixin 应用在整个应用范围内。一旦注册，它们就可以在当前的应用中任何组件模板内使用它。插件作者可以使用此方法将自定义行为注入组件。不建议在应用代码中使用。</p><h3 id="mount" tabindex="-1">mount <a class="header-anchor" href="#mount" aria-hidden="true">#</a></h3><p>所提供 DOM 元素的 <code>innerHTML</code> 将被替换为应用根组件的模板渲染结果。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 做一些必要的准备</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#my-app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="provide" tabindex="-1">provide <a class="header-anchor" href="#provide" aria-hidden="true">#</a></h3><p>设置一个可以被注入到应用范围内所有组件中的值。组件应该使用 <code>inject</code> 来接收 <code>provide</code> 的值。</p><p>从 <code>provide</code>/<code>inject</code> 的角度来看，可以将应用程序视为根级别的祖先，而根组件是其唯一的子级。</p><p>该方法不应该与 <code>provide</code> 组件选项或组合式 API 中的 <code>provide</code> 方法混淆。虽然它们也是相同的 <code>provide</code>/<code>inject</code> 机制的一部分，但是它们是用来配置组件而非应用所 <code>provide</code> 的值。</p><p>通过应用提供值在编写插件时尤其有用，因为插件一般不能使用组件来提供值。这是对 <code>globalProperties</code> 的替代选择。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      {{ user }}</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">administrator</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="unmount" tabindex="-1">unmount <a class="header-anchor" href="#unmount" aria-hidden="true">#</a></h3><p>卸载应用实例的根组件</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 做一些必要的准备</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#my-app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 挂载 5 秒后，应用将被卸载</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unmount</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="use" tabindex="-1">use <a class="header-anchor" href="#use" aria-hidden="true">#</a></h3><p>安装 Vue.js 插件。如果插件是一个对象，则它必须暴露一个 <code>install</code> 方法。如果插件本身是一个函数，则它将被视为 <code>install</code> 方法。</p><p>该 <code>install</code> 方法将以应用实例作为第一个参数被调用。传给 <code>use</code> 的其他 <code>options</code> 参数将作为后续参数传入该安装方法。</p><p>当在同一个插件上多次调用此方法时，该插件将仅安装一次。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyPlugin </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./plugins/MyPlugin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(MyPlugin)</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h3><p>以字符串形式提供已安装的 Vue 的版本号。这对于基于不同版本使用不同策略的社区插件来说特别有用。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This plugin requires Vue 3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="全局api" tabindex="-1">全局API <a class="header-anchor" href="#全局api" aria-hidden="true">#</a></h2><h3 id="createapp" tabindex="-1">createApp <a class="header-anchor" href="#createapp" aria-hidden="true">#</a></h3><p>返回一个提供应用上下文的应用实例。应用实例挂载的整个组件树共享同一个上下文。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="h" tabindex="-1">h <a class="header-anchor" href="#h" aria-hidden="true">#</a></h3><p>返回一个”虚拟节点“，通常缩写为 VNode：一个普通对象，其中包含向 Vue 描述它应在页面上渲染哪种节点的信息，包括所有子节点的描述。它的目的是用于手动编写的渲染函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">h</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Some title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="definecomponent" tabindex="-1">defineComponent <a class="header-anchor" href="#definecomponent" aria-hidden="true">#</a></h3><p>从实现上看，defineComponent 只返回传递给它的对象。但是，就类型而言，返回的值有一个合成类型的构造函数，用于手动渲染函数、TSX 和 IDE 工具支持。</p><ul><li>参数 具有组件选项的对象</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>或者是一个 setup 函数，函数名称将作为组件名称来使用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineComponent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HelloWorld </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HelloWorld</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="defineasynccomponent" tabindex="-1">defineAsyncComponent <a class="header-anchor" href="#defineasynccomponent" aria-hidden="true">#</a></h3><p>创建一个只有在需要时才会加载的异步组件。</p><h3 id="definecustomelement" tabindex="-1">defineCustomElement <a class="header-anchor" href="#definecustomelement" aria-hidden="true">#</a></h3><p>该方法接受和 defineComponent 相同的参数，但是返回一个原生的自定义元素，该元素可以用于任意框架或不基于框架使用。</p><h3 id="resolvecomponent" tabindex="-1">resolveComponent <a class="header-anchor" href="#resolvecomponent" aria-hidden="true">#</a></h3><p>如果在当前应用实例中可用，则允许按名称解析 component。</p><p>返回一个 Component。如果没有找到，则返回接收的参数 name。</p><h3 id="resolvedynamiccomponent" tabindex="-1">resolveDynamicComponent <a class="header-anchor" href="#resolvedynamiccomponent" aria-hidden="true">#</a></h3><p>允许使用与 <code>&lt;component :is=&quot;&quot;&gt;</code> 相同的机制来解析一个 <code>component。</code></p><p>返回已解析的 <code>Component</code> 或新创建的 <code>VNode</code>，其中组件名称作为节点标签。如果找不到 Component，将发出警告。</p><h3 id="resolvedirective" tabindex="-1">resolveDirective <a class="header-anchor" href="#resolvedirective" aria-hidden="true">#</a></h3><p>如果在当前应用实例中可用，则允许通过其名称解析一个 directive。</p><p>返回一个 Directive。如果没有找到，则返回 undefined。</p><h3 id="withdirectives" tabindex="-1">withDirectives <a class="header-anchor" href="#withdirectives" aria-hidden="true">#</a></h3><p>允许将指令应用于 VNode。返回一个包含应用指令的 VNode。</p><h3 id="createrenderer" tabindex="-1">createRenderer <a class="header-anchor" href="#createrenderer" aria-hidden="true">#</a></h3><p>createRenderer 函数接受两个泛型参数： HostNode 和 HostElement，对应于宿主环境中的 Node 和 Element 类型。</p><h3 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-hidden="true">#</a></h3><p>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。</p><h3 id="mergeprops" tabindex="-1">mergeProps <a class="header-anchor" href="#mergeprops" aria-hidden="true">#</a></h3><p>将包含 VNode prop 的多个对象合并为一个单独的对象。其返回的是一个新创建的对象，而作为参数传递的对象则不会被修改。</p><p>可以传递不限数量的对象，后面参数的 property 优先。事件监听器被特殊处理，class 和 style 也是如此，这些 property 的值是被合并的而不是覆盖的。</p><h3 id="usecssmodule" tabindex="-1">useCssModule <a class="header-anchor" href="#usecssmodule" aria-hidden="true">#</a></h3><p>允许在 setup 的单文件组件函数中访问 CSS 模块。</p><h3 id="version-1" tabindex="-1">version <a class="header-anchor" href="#version-1" aria-hidden="true">#</a></h3><p>以字符串形式提供已安装的 Vue 的版本号。</p><h3 id="params" tabindex="-1">params <a class="header-anchor" href="#params" aria-hidden="true">#</a></h3><ul><li>props <ul><li>类型检查 <ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul></li><li>validator 自定义验证函数</li></ul></li><li>template</li><li>emits</li></ul><h2 id="mount-1" tabindex="-1">mount <a class="header-anchor" href="#mount-1" aria-hidden="true">#</a></h2><h2 id="emit" tabindex="-1">$emit <a class="header-anchor" href="#emit" aria-hidden="true">#</a></h2><p>在父级组件监听事件的时候，可以通过<code>$event</code>访问到被抛出的值</p><h2 id="provied-inject" tabindex="-1">provied/inject <a class="header-anchor" href="#provied-inject" aria-hidden="true">#</a></h2><h2 id="defineasynccomponent-1" tabindex="-1">defineAsyncComponent <a class="header-anchor" href="#defineasynccomponent-1" aria-hidden="true">#</a></h2><h2 id="suspense" tabindex="-1">Suspense <a class="header-anchor" href="#suspense" aria-hidden="true">#</a></h2><h1 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h1><ul><li>v-modal</li></ul>`,168),o=[p];function t(c,r,i,y,D,d){return a(),n("div",null,o)}const C=s(e,[["render",t]]);export{A as __pageData,C as default};

import{_ as s,c as a,o as n,a as l}from"./app.248772be.js";const A=JSON.parse('{"title":"webpack","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[{"level":3,"title":"模块化的演进过程","slug":"模块化的演进过程","link":"#模块化的演进过程","children":[]},{"level":3,"title":"模块化规范的出现","slug":"模块化规范的出现","link":"#模块化规范的出现","children":[]},{"level":3,"title":"模块化问题","slug":"模块化问题","link":"#模块化问题","children":[]}]},{"level":2,"title":"如何使用Webpack实现模块化打包？","slug":"如何使用webpack实现模块化打包","link":"#如何使用webpack实现模块化打包","children":[{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"配置打包过程","slug":"配置打包过程","link":"#配置打包过程","children":[]}]},{"level":2,"title":"如何通过Loader实现特殊资源加载？","slug":"如何通过loader实现特殊资源加载","link":"#如何通过loader实现特殊资源加载","children":[{"level":3,"title":"使用Loader","slug":"使用loader","link":"#使用loader","children":[]},{"level":3,"title":"实现Loader","slug":"实现loader","link":"#实现loader","children":[]}]},{"level":2,"title":"Webpack 插件机制的目的","slug":"webpack-插件机制的目的","link":"#webpack-插件机制的目的","children":[{"level":3,"title":"常用插件","slug":"常用插件","link":"#常用插件","children":[]}]},{"level":2,"title":"webpack 构建TS项目","slug":"webpack-构建ts项目","link":"#webpack-构建ts项目","children":[{"level":3,"title":"安装依赖","slug":"安装依赖","link":"#安装依赖","children":[]},{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]}]}],"relativePath":"engineering/webpack/index.md"}'),p={name:"engineering/webpack/index.md"},o=l(`<h1 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h1><p>webpack所解决的问题：</p><p>如何在前端项目中更高效的管理和维护项目中的每一个资源</p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-hidden="true">#</a></h2><h3 id="模块化的演进过程" tabindex="-1">模块化的演进过程 <a class="header-anchor" href="#模块化的演进过程" aria-hidden="true">#</a></h3><p>早期的前端技术标准根本没有预料到前端行业会有今天这个规模，所以在设计上存在很多缺陷</p><h4 id="stag1-文件划分的方式" tabindex="-1">Stag1 - 文件划分的方式 <a class="header-anchor" href="#stag1-文件划分的方式" aria-hidden="true">#</a></h4><p>缺点：</p><ul><li>模块直接在全局工作，大量模块成员污染全局作用域</li><li>没有私有空间，所有模块内的成员都可以在模块外部被访问和修改</li><li>一旦模块增多，容易产生命名冲突</li><li>无法管理模块与模块之间的依赖</li><li>在维护的过程中也很难分辨每个成员所属的模块</li></ul><h4 id="stag2-命名空间方式" tabindex="-1">Stag2 - 命名空间方式 <a class="header-anchor" href="#stag2-命名空间方式" aria-hidden="true">#</a></h4><p>解决了命名冲突的问题，但其他问题依然存在</p><h4 id="stag3-iife" tabindex="-1">Stag3 - IIFE <a class="header-anchor" href="#stag3-iife" aria-hidden="true">#</a></h4><blockquote><p>以上方式有模块加载的问题</p></blockquote><p>更为理想的方式是在页面中引入一个JS入口文件，其余用到的模块可以通过代码控制，按需加载</p><h3 id="模块化规范的出现" tabindex="-1">模块化规范的出现 <a class="header-anchor" href="#模块化规范的出现" aria-hidden="true">#</a></h3><p>目前通过约定实现模块化的方式，不同的开发者在实施的过程中会出现一些细微的差别，为了统一不同开发者、不同项目之间的差异，就需要制定一个行业标准去规范模块化的实现方式</p><p>两点需求：</p><ul><li>一个统一的模块化标准规范</li><li>一个可以自动加载模块的基础库</li></ul><h4 id="commonjs规范" tabindex="-1">CommonJS规范 <a class="header-anchor" href="#commonjs规范" aria-hidden="true">#</a></h4><p>是Node.js中所遵循的模块规范</p><p>该规范约定一个文件就是一个模块，每个模块都有单独的作用域，通过module.exports导出成员，再通过require函数载入模块</p><h4 id="amd规范" tabindex="-1">AMD规范 <a class="header-anchor" href="#amd规范" aria-hidden="true">#</a></h4><p>在早期制定前端模块化标准时，并没有直接选择CommonJS规范，而是专门为浏览器重新设计了一个规范AMD（Asynchronous Module Definition),即异步模块定义规范</p><p>同期还推出了Require.js，除了实现了AMD模块化规范，本身也是一个非常强大的模块加载器</p><h4 id="es-modules规范" tabindex="-1">ES Modules规范 <a class="header-anchor" href="#es-modules规范" aria-hidden="true">#</a></h4><p>JavaScript的标准逐渐走向完善</p><p>端模块化规范的最佳实践方式也基本实现了统一：</p><ul><li>在Node.js环境中，遵循CommonJS规范来组织模块</li><li>在浏览器环境中，遵循ES Modules规范</li></ul><p>ES modules规范是ECMAScript 2015(ES6) 中才定义的模块系统，是近几年才制定的标准，存在环境兼容问题，随着Webpack等一系列打包工具的流行，这一规范才开始逐渐被普及</p><p>经过5年的迭代，ESModules已发展成为现今最主流的前端模块化标准</p><p>针对ES Modules本身的一些特性可参考：</p><ul><li>MDN官方的详细资料</li><li>ECMAScript官方详细资料</li></ul><h3 id="模块化问题" tabindex="-1">模块化问题 <a class="header-anchor" href="#模块化问题" aria-hidden="true">#</a></h3><ul><li><p>我们所使用的 ES Modules模块系统本身就存在环境兼容问题，尽管现如今主流浏览器的最新版本都支持这一特性，是目前还无法保持用户的浏览器使用情况，所以还需要解决兼容问题</p></li><li><p>模块化的方式划分出来的模块文件过多，而前端应用又运行在浏览器中，每一个文件都需要单独从服务端请求回来，零散的模块文件必然导致浏览器的频繁发送网络请求，影响应用的工作效率</p></li><li><p>随着应用日益复杂，在前端应用开发过程中不仅仅只有JavaScript代码需要模块化，HTML和CSS这些资源文件也会面临需要被模块化的问题，从宏观角度来看，这些文件也都应该看作前端应用中的一个模块，只不过这些模块的种类和用途跟JavaScript不同</p></li></ul><p>Webpack从一个“打包工具”发展成现在开发者眼中对整个前端项目的“构建系统”，表面上似乎只是称呼发生了变化，但背后却透露出一个信号：模块化思想是非常伟大的，伟大到可以帮你“统治”前端整个项目</p><h2 id="如何使用webpack实现模块化打包" tabindex="-1">如何使用Webpack实现模块化打包？ <a class="header-anchor" href="#如何使用webpack实现模块化打包" aria-hidden="true">#</a></h2><ul><li>能够将散落的模块打包到一起</li><li>能够编译代码中的新特性</li><li>能够支持不同种类的前端资源模块</li></ul><p>以Webpack为例：</p><ul><li>Webpack作为一个模块打包工具，本身就可以实现模块化代码打包的问题，通过Webpack可以将零散的JavaScript代码打包到一个JS文件中</li><li>对于有环境兼容问题的代码，Webpack可以在打包过程中通过Loader机制对其实现编译转换，然后再进行打包</li><li>对于不同类型的前端模块，Webpack支持在JavaScript中以模块化的方式载入任意类型的资源文件，例如可以通过Webpack实现在JavaScript中加载CSS文件，被加载的CSS文件将会通过style标签的方式工作</li></ul><p>Webpack还具有代码拆分的能力，能够将应用中所有的模块按需分块打包，不用担心全部代码打包到一起，产生单个文件过大，导致加载慢的问题，非常适合现代化的大型Web应用</p><p>作为目前最主流的前端模块打包器，提供了一整套前端项目模块化方案，而不仅仅局限于对JavaScript的模块化，可以轻松实现对前端项目开发过程中涉及到的资源进行模块化</p><h3 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-hidden="true">#</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 安装</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看版本</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行: 默认会自动从src/index.js文件开始打包</span></span>
<span class="line"><span style="color:#FFCB6B;">webpack</span></span>
<span class="line"></span></code></pre></div><h3 id="配置打包过程" tabindex="-1">配置打包过程 <a class="header-anchor" href="#配置打包过程" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/main.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">output</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>Webpack的配置项较多，很多选项都支持不同类型的配置方式，如果你刚刚接触Webpack的配置，这些配置选项一定会让你感到头大</p><p>Webpack针对不同环境的三组预设配置：</p><ul><li><p>production模式 启动内置优化插件，自动优化打包结果，打包速度偏慢</p></li><li><p>development模式 自动优化打包速度，添加一些调试过程中的辅助插件以便于更好的调试错误</p></li><li><p>none模式 运行最原始的打包，不做任何额外处理，这种模式一般需要分析我们模块的打包结果时会用到</p></li></ul><p>想要修改Webpack工作模式的方式有两种：</p><ul><li>通过CLI --mode 参数传入</li><li>通过配置文件设置mode属性</li></ul><h2 id="如何通过loader实现特殊资源加载" tabindex="-1">如何通过Loader实现特殊资源加载？ <a class="header-anchor" href="#如何通过loader实现特殊资源加载" aria-hidden="true">#</a></h2><p>Webpack不仅是JavaScript模块打包工具，还是整个前端项目（前端工程）的模块打包工具，可以通过Webpack去管理前端项目中任意类型的资源文件</p><h3 id="使用loader" tabindex="-1">使用Loader <a class="header-anchor" href="#使用loader" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/main.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">md</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./markdown-loader</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="实现loader" tabindex="-1">实现Loader <a class="header-anchor" href="#实现loader" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// markdown-loader.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> marked </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">marked</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加载到的模块内容</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// console.log(source);</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 返回值就是最终被打包的内容</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// return &#39;hello loader~&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// return &#39;console.log(&quot;hello loader~&quot;)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 将markdown转换为html字符串</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">marked</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 将html字符串拼接为一段导出字符串的JS代码</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// // const code = \`module.exports = \${JSON.stringify(html)}\`</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// const code = \`exports default \${JSON.stringify(html)}\`</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// // 返回js代码</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// return code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 直接返回html，交给下一个loader去处理</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Loader机制是Webpack最核心的机制，正因为有Loader机制，Webpack才能足以支撑整个前端项目模块化的大梁，实现通过Webpack去加载任何你想要加载的资源</p><h2 id="webpack-插件机制的目的" tabindex="-1">Webpack 插件机制的目的 <a class="header-anchor" href="#webpack-插件机制的目的" aria-hidden="true">#</a></h2><p>是为了增强Webpack在项目自动化构建方面的能力</p><p>插件最常见的应用场景：</p><ul><li>实现自动在打包之前清除dist目录（上次的打包结果）</li><li>自动生成应用所需要的HTML文件</li><li>根据不同环境为代码注入类似API地址这种可能变化的部分</li><li>拷贝不需要参与打包的资源文件到输出目录</li><li>压缩Webpack打包完成后输出的文件</li><li>自动发布打包结果到服务器实现自动部署</li></ul><h3 id="常用插件" tabindex="-1">常用插件 <a class="header-anchor" href="#常用插件" aria-hidden="true">#</a></h3><ul><li>clean-webpack-plugin</li></ul><p>实现自动在打包之前清除dist目录</p><p><code>npm i clean-webpack-plugin -D</code></p><ul><li>html-webpack-plugin</li></ul><p>用于生成HTML的插件</p><p><code>npm i html-webpack-plugin -D</code></p><p>HTML文件一般都是通过硬编码的方式，单独存放在项目目录下</p><p>这种方式有两个问题：</p><ol><li>项目发布时，我们需要同时发布根目录下的HTML文件和dist目录中所有的打包结果，非常麻烦，而且上线过后还要确保HTML代码中的资源文件路径是正确的</li><li>如果打包结果输出的目录或者文件名称发生变化，那HTML代码中所对应的script标签也需要我们手动修改路径</li></ol><p>相比于之前写死HTML文件的方式，自动生成HTML的优势在于：</p><ul><li>HTML也输出到dist目录中了，上线时只需要把dist目录发布出去</li><li>HTML中的script标签是自动引入的，所以可以确保资源文件的路径是正常的</li></ul><h2 id="webpack-构建ts项目" tabindex="-1">webpack 构建TS项目 <a class="header-anchor" href="#webpack-构建ts项目" aria-hidden="true">#</a></h2><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">安装webpack   npm install webpack -D</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">webpack4以上需要 npm install  webpack-cli -D</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">编译TS  npm install ts-loader -D</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">TS环境 npm install typescript -D</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">热更新服务 npm install  webpack-dev-server -D</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">HTML模板 npm install html-webpack-plugin -D</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> htmlWebpackPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">html-webpack-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/index.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">stats</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts-loader</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        ]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1988</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">htmlWebpackPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./public/index.html</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,78),e=[o];function c(t,r,D,i,y,F){return n(),a("div",null,e)}const d=s(p,[["render",c]]);export{A as __pageData,d as default};
